import { join, toFileUrl, walk } from "./deps.ts";

const help = `fresh routes

Regenerate the route mapping for your fresh project.

To regenerate the mapping in the current directory:
  fresh routes

To regenerate the mapping in the './foobar' subdirectory:
  fresh routes ./foobar

USAGE:
    fresh routes [OPTIONS] [DIRECTORY]

OPTIONS:
    -h, --help                 Prints help information
`;

export interface Args {
  help: boolean;
}

export async function routesSubcommand(rawArgs: Record<string, any>) {
  const args: Args = {
    help: !!rawArgs.help,
  };
  const directory: string | null = typeof rawArgs._[0] === "string"
    ? rawArgs._[0]
    : Deno.cwd();
  if (args.help) {
    console.log(help);
    Deno.exit(0);
  }
  await routes(directory);
}

export async function routes(directory: string) {
  const apis = [];
  const pages = [];
  const pagesDir = join(Deno.cwd(), directory, "./pages");
  const pagesUrl = new URL(pagesDir, "file:///");
  const folder = walk(pagesDir, {
    includeDirs: false,
    includeFiles: true,
    exts: ["tsx", "jsx", "ts", "js"],
  });
  for await (const { isFile, path } of folder) {
    if (isFile) {
      const file = toFileUrl(path).href.substring(pagesUrl.href.length);
      if (file.startsWith("/api/")) {
        apis.push(file);
      } else {
        pages.push(file);
      }
    }
  }

  const pageImports = pages.map((file, i) =>
    `import * as $p${i} from "./pages${file}";`
  ).join("\n");
  const apiImports = apis.map((file, i) =>
    `import * as $a${i} from "./pages${file}";`
  ).join("\n");
  const pageArray = pages.map((file, i) => `[$p${i}, "./pages${file}"]`)
    .join(", ");
  const apiArray = apis.map((file, i) => `[$a${i}, "./pages${file}"]`)
    .join(", ");

  const output = `// DO NOT EDIT. This file is generated by \`fresh\`.
// This file SHOULD be checked into source version control.
// To update this file, run \`fresh routes\`.
  
import { setup } from "${new URL("../../server.ts", import.meta.url)}";

${pageImports}
${apiImports}

setup([${pageArray}], [${apiArray}], import.meta.url);
`;

  await Deno.writeTextFile(join(directory, "./server.ts"), output);
}
